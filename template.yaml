  AWSTemplateFormatVersion: '2010-09-09'
  Transform: AWS::Serverless-2016-10-31
  Description: >
    bookmarks-backend

    Sample SAM Template for bookmarks-backend

  # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
  Globals:
    Function:
      Tracing: Active
      Runtime: nodejs22.x
      Timeout: 3
      # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
      LoggingConfig:
        LogFormat: JSON
    Api:
      TracingEnabled: true
  Resources:
    BookmarkTableV2:
      Type: AWS::DynamoDB::Table
      Properties:
        # TableName: BookmarkTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: bookmarkId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: bookmarkId
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    BookmarkApi:
      Type: AWS::Serverless::Api
      Properties:
        Name: BookmarkApi
        StageName: prod
        Cors:
          AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
          AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
          AllowOrigin: "'https://main.d8co6pmurjf0r.amplifyapp.com'"
          AllowCredentials: true
        Auth:
          DefaultAuthorizer: CognitoAuthorizer
          AddDefaultAuthorizerToCorsPreflight: false
          Authorizers:
            CognitoAuthorizer:
              UserPoolArn: arn:aws:cognito-idp:us-east-1:359110058371:userpool/us-east-1_UkxSoZvmM

    CreateBookmarkFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/createBookmark/
        Handler: app.handler
        Events:
          CreateBookmark:
            Type: Api
            Properties:
              RestApiId: !Ref BookmarkApi
              Path: /bookmarks
              Method: POST
              Auth:
                Authorizer: CognitoAuthorizer
        Environment:
          Variables:
            TABLE_NAME: !Ref BookmarkTableV2
        Policies:
          - DynamoDBCrudPolicy:
              TableName: !Ref BookmarkTableV2

    GetBookmarksFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/getBookmarks/
        Handler: app.handler
        Events:
          GetBookmarks:
            Type: Api
            Properties:
              RestApiId: !Ref BookmarkApi
              Path: /bookmarks
              Method: GET
              Auth:
                Authorizer: CognitoAuthorizer
        Environment:
          Variables:
            TABLE_NAME: !Ref BookmarkTableV2
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref BookmarkTableV2

    StreamProcessorFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/streamProcessor/
        Handler: app.handler
        Events:
          BookmarkTableStream:
            Type: DynamoDB
            Properties:
              Stream: !GetAtt BookmarkTableV2.StreamArn
              StartingPosition: LATEST
        Policies:
          - Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource: "*"

    NewBookmarkTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: NewBookmarkTopic

    ApprovalNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ManualApprovalTopic

    ApprovalNotificationSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref ApprovalNotificationTopic
        Protocol: email
        Endpoint: jellopops@gmail.com

    AllowEventBridgeToPublishToSNS:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref NewBookmarkTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sns:Publish
              Resource: !Ref NewBookmarkTopic

    StepFunctionExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: StepFunctionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:GetItem
                  Resource:
                    - !GetAtt BookmarkContestFunction.Arn
                    - !GetAtt ManualApprovalFunction.Arn
                    - !GetAtt ValidateBookmarkFunction.Arn
                - Effect: Allow
                  Action: states:SendTaskSuccess
                  Resource: "*"

    BookmarkContestStateMachine:
      Type: AWS::Serverless::StateMachine
      Properties:
        Tracing:
          Enabled: true
        Name: BookmarkContestApprovalWorkflow
        Role: !GetAtt StepFunctionExecutionRole.Arn
        Definition:
          StartAt: ValidateBookmark
          States:
            ValidateBookmark:
              Type: Task
              Resource: !GetAtt ValidateBookmarkFunction.Arn
              ResultPath: "$.validationResult"
              Next: CheckValidationResult
            CheckValidationResult:
              Type: Choice
              Choices:
                - Variable: "$.validationResult.status"
                  StringEquals: "duplicate"
                  Next: DuplicateSubmission
                - Variable: "$.validationResult.status"
                  StringEquals: "invalid"
                  Next: InvalidUrl
              Default: WaitForApproval
            DuplicateSubmission:
              Type: Succeed
              Comment: "Bookmark already exists in contest."
            InvalidUrl:
              Type: Succeed
              Comment: "Bookmark URL is invalid."
            WaitForApproval:
              Type: Task
              Resource: arn:aws:states:::lambda:invoke.waitForTaskToken
              Parameters:
                FunctionName: !Ref ManualApprovalFunction
                Payload:
                  token.$: "$$.Task.Token"
                  input.$: "$"
              TimeoutSeconds: 86400
              ResultPath: "$.approvalResult"
              Next: RunBookmarkContestLogic
            RunBookmarkContestLogic:
              Type: Task
              Resource: !GetAtt BookmarkContestFunction.Arn
              InputPath: "$"
              End: true

    EventBridgeInvokeStepFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AllowInvokeStepFunction
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: states:StartExecution
                  Resource: !Ref BookmarkContestStateMachine

    ValidateBookmarkFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/validateBookmark/
        Handler: app.handler
        Environment:
          Variables:
            CONTEST_TABLE_NAME: !Ref BookmarkContestTable
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref BookmarkContestTable
    
    ManualApprovalFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/manualApproval/
        Handler: app.handler
        Timeout: 10
        Environment:
          Variables:
            NOTIFICATION_TOPIC_ARN: !Ref ApprovalNotificationTopic
            APPROVAL_LINK_BASE: !Sub "https://${BookmarkApi}.execute-api.${AWS::Region}.amazonaws.com/prod/approve"
        Policies:
          - Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref ApprovalNotificationTopic

    ApproveBookmarkFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/approveBookmark/
        Handler: app.handler
        Events:
          ApproveApi:
            Type: Api
            Properties:
              Path: /approve
              Method: GET
              RestApiId: !Ref BookmarkApi
              Auth:
                Authorizer: NONE
        Policies:
          - Statement:
              - Effect: Allow
                Action: states:SendTaskSuccess
                Resource: "*"

    BookmarkContestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BookmarkContestEntries
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    BookmarkContestFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/bookmarkContest/
        Handler: app.handler
        Environment:
          Variables:
            FORCE_ERROR: false
        Policies:
          - DynamoDBCrudPolicy:
              TableName: BookmarkContestEntries

    BookmarkCreatedRule:
      Type: AWS::Events::Rule
      Properties:
        Name: BookmarkCreatedRule
        EventPattern:
          source:
            - "bookmark.table"
          detail-type:
            - "BookmarkCreated"
        Targets:
          - Arn: !Ref BookmarkContestStateMachine
            Id: "TriggerStepFunction"
            RoleArn: !GetAtt EventBridgeInvokeStepFunctionRole.Arn

    OpsAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: OpsAlertsTopic

    OpsAlertsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref OpsAlertsTopic
        Protocol: email
        Endpoint: jellopops@gmail.com

    BookmarkContestLambdaErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm if BookmarkContest Lambda has errors"
        Namespace: AWS/Lambda
        MetricName: Errors
        Dimensions:
          - Name: FunctionName
            Value: !Ref BookmarkContestFunction
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - arn:aws:sns:us-east-1:359110058371:OpsAlertsTopic

  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value: !Sub "https://${BookmarkApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"

    ApproveEndpoint:
      Description: "Approval endpoint URL"
      Value: !Sub "https://${BookmarkApi}.execute-api.${AWS::Region}.amazonaws.com/prod/approve"
